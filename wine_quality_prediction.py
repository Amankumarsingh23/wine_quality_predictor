# -*- coding: utf-8 -*-
"""wine quality prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AE7RwqijmfvJrFO_dpu8t6-MhNVMjQ1M

installing dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn.datasets
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

"""Data collection"""

#loading the datset to pandas dataframe
wine_dataset= pd.read_csv('/content/winequality-red.csv')

# no of rows and columns in dataset
wine_dataset.shape

#first five rows
wine_dataset.head()

#checking for missing vaues
wine_dataset.isnull().sum()

"""DATA ANALYSIS AND VISUALISATION

"""

#statistical mmeasure of the data
wine_dataset.describe()

# number of vaues for each quality
sns.catplot(x='quality',data=wine_dataset,kind='count')

# volatile acidity vs quality
plot=plt.figure(figsize=(5,5))
sns.barplot(x='quality',y='volatile acidity',data=wine_dataset)

#citric acid vs quality
plot=plt.figure(figsize=(5,5))
sns.barplot(x='quality',y='citric acid',data=wine_dataset)

#alchol vs quality
plot=plt.figure(figsize=(5,5))
sns.barplot(x='quality',y='alcohol',data=wine_dataset)

#sulphate vs quality
plot=plt.figure(figsize=(5,5))
sns.barplot(x='quality',y='sulphates',data=wine_dataset)

#ph vs quality
plot=plt.figure(figsize=(5,5))
sns.barplot(x='quality',y='pH',data=wine_dataset)

#density vs quality
plot=plt.figure(figsize=(5,5))
sns.barplot(x='quality',y='density',data=wine_dataset)

"""CORRELATION BETWEEN DATA

1.POSITIVE CORRELATION

2.NEGATIVE CORRELATION
"""

#constructing a heat map to understand correlation
correlation=wine_dataset.corr()
plt.figure(figsize=(10,10))
sns.heatmap(correlation,cbar=True,square=True,fmt='.1f',annot=True,annot_kws={'size':8},cmap='Blues')

"""DATA PREPROCESSING

LABEL BINARIZATION
"""

#separate the data and the label
X=wine_dataset.drop('quality',axis=1)
Y=wine_dataset['quality'].apply(lambda y_value: 1 if y_value>=7 else 0)

print(Y)

"""TRAINING AND TEST DATA"""

x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.2,random_state=2)

print(Y.shape,y_train.shape,y_test.shape)

"""MODEL TRAINING

RANDOM FOREST CLASSIFIER
"""

model = RandomForestClassifier()

model.fit(x_train,y_train)

"""**MODEL EVALUAATION **"""

#accuracy score
x_train_prediction=model.predict(x_train)
training_data_accuracy=accuracy_score(x_train_prediction,y_train)

print('accuracy on training data :',training_data_accuracy)

#accuracy score on test data
x_test_prediction=model.predict(x_test)
test_data_accuracy=accuracy_score(x_test_prediction,y_test)

print('accuracy on test data :',test_data_accuracy)

"""**Building the predictive system **"""

input_data=(
7.5,0.5,0.36,6.1,0.071,17.0,102.0,0.9978,3.35,0.8,10.5)

#changing the input data to a numppy array
input_data_as_numpy_array = np.asarray(input_data)

input_data_reshaped= input_data_as_numpy_array.reshape(1,-1)

prediction=model.predict(input_data_reshaped)
print(prediction)

if(prediction[0]==1):
  print('good quality wine')
else:
  print('bad quality wine')

